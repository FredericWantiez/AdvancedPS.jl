var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Samplers","page":"API","title":"Samplers","text":"","category":"section"},{"location":"api/#Resampling","page":"API","title":"Resampling","text":"","category":"section"},{"location":"api/#RNG","page":"API","title":"RNG","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [AdvancedPS]","category":"page"},{"location":"api/#AdvancedPS.PG-Tuple{Int64}","page":"API","title":"AdvancedPS.PG","text":"PG(n, [resampler = ResampleWithESSThreshold()])\nPG(n, [resampler = resample_systematic, ]threshold)\n\nCreate a Particle Gibbs sampler with n particles.\n\nIf the algorithm for the resampling step is not specified explicitly, systematic resampling is performed if the estimated effective sample size per particle drops below 0.5.\n\n\n\n\n\n","category":"method"},{"location":"api/#AdvancedPS.ParticleContainer","page":"API","title":"AdvancedPS.ParticleContainer","text":"Data structure for particle filters\n\neffectiveSampleSize(pc :: ParticleContainer): Return the effective sample size of the particles in pc\n\n\n\n\n\n","category":"type"},{"location":"api/#AdvancedPS.SMC-Tuple{Int64}","page":"API","title":"AdvancedPS.SMC","text":"SMC(n[, resampler = ResampleWithESSThreshold()])\nSMC(n, [resampler = resample_systematic, ]threshold)\n\nCreate a sequential Monte Carlo (SMC) sampler with n particles.\n\nIf the algorithm for the resampling step is not specified explicitly, systematic resampling is performed if the estimated effective sample size per particle drops below 0.5.\n\n\n\n\n\n","category":"method"},{"location":"api/#AdvancedPS.TracedRNG","page":"API","title":"AdvancedPS.TracedRNG","text":"TracedRNG{R,N,T}\n\nWrapped random number generator from Random123 to keep track of random streams during model evaluation\n\n\n\n\n\n","category":"type"},{"location":"api/#AdvancedPS.TracedRNG-2","page":"API","title":"AdvancedPS.TracedRNG","text":"TracedRNG(r::Random123.AbstractR123=AdvancedPS._BASE_RNG())\n\nCreate a TracedRNG with r as the inner RNG. \n\n\n\n\n\n","category":"type"},{"location":"api/#AdvancedPS.effectiveSampleSize-Tuple{AdvancedPS.ParticleContainer}","page":"API","title":"AdvancedPS.effectiveSampleSize","text":"effectiveSampleSize(pc::ParticleContainer)\n\nCompute the effective sample size 1   wᵢ², where wᵢ`are the normalized weights.\n\n\n\n\n\n","category":"method"},{"location":"api/#AdvancedPS.getweight-Tuple{AdvancedPS.ParticleContainer, Any}","page":"API","title":"AdvancedPS.getweight","text":"getweight(pc::ParticleContainer, i)\n\nCompute the normalized weight of the ith particle.\n\n\n\n\n\n","category":"method"},{"location":"api/#AdvancedPS.getweights-Tuple{AdvancedPS.ParticleContainer}","page":"API","title":"AdvancedPS.getweights","text":"getweights(pc::ParticleContainer)\n\nCompute the normalized weights of the particles.\n\n\n\n\n\n","category":"method"},{"location":"api/#AdvancedPS.inc_counter!","page":"API","title":"AdvancedPS.inc_counter!","text":"inc_counter!(r::TracedRNG, n::Integer=1)\n\nIncrease the model step counter by n\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.increase_logweight!-Tuple{AdvancedPS.ParticleContainer, Any, Any}","page":"API","title":"AdvancedPS.increase_logweight!","text":"increase_logweight!(pc::ParticleContainer, i::Int, x)\n\nIncrease the unnormalized logarithmic weight of the ith particle with x.\n\n\n\n\n\n","category":"method"},{"location":"api/#AdvancedPS.load_state!-Tuple{AdvancedPS.TracedRNG}","page":"API","title":"AdvancedPS.load_state!","text":"load_state!(r::TracedRNG)\n\nLoad state from current model iteration. Random streams are now replayed\n\n\n\n\n\n","category":"method"},{"location":"api/#AdvancedPS.logZ-Tuple{AdvancedPS.ParticleContainer}","page":"API","title":"AdvancedPS.logZ","text":"logZ(pc::ParticleContainer)\n\nReturn the logarithm of the normalizing constant of the unnormalized logarithmic weights.\n\n\n\n\n\n","category":"method"},{"location":"api/#AdvancedPS.observe-Tuple{Distributions.Distribution, Any}","page":"API","title":"AdvancedPS.observe","text":"observe(dist::Distribution, x)\n\nObserve sample x from distribution dist and yield its log-likelihood value.\n\n\n\n\n\n","category":"method"},{"location":"api/#AdvancedPS.resample_multinomial","page":"API","title":"AdvancedPS.resample_multinomial","text":"resample_multinomial(rng, weights, n)\n\nReturn a vector of n samples x₁, ..., xₙ from the numbers 1, ..., length(weights), generated by multinomial resampling.\n\nThe new indices are sampled from the multinomial distribution with probabilities equal to weights\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.resample_propagate!","page":"API","title":"AdvancedPS.resample_propagate!","text":"resample_propagate!(rng, pc::ParticleContainer[, randcat = resample_systematic,\n                    ref = nothing; weights = getweights(pc)])\n\nResample and propagate the particles in pc.\n\nFunction randcat is used for sampling ancestor indices from the categorical distribution of the particle weights. For Particle Gibbs sampling, one can provide a reference particle ref that is ensured to survive the resampling step.\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.resample_residual","page":"API","title":"AdvancedPS.resample_residual","text":"resample_residual(rng, weights, n)\n\nReturn a vector of n samples x₁, ..., xₙ from the numbers 1, ..., length(weights), generated by residual resampling.\n\nIn residual resampling we start by duplicating all the particles whose weight is bigger than 1/n. We copy each of these particles N_i times where\n\nN_i = leftlfloor n w_i rightrfloor\n\nWe then duplicate the R_t = n - sum_i N_i missing particles using multinomial resampling with the residual weights given by:\n\ntildew = w_i - fracN_iN\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.resample_stratified","page":"API","title":"AdvancedPS.resample_stratified","text":"resample_stratified(rng, weights, n)\n\nReturn a vector of n samples x₁, ..., xₙ from the numbers 1, ..., length(weights), generated by stratified resampling.\n\nIn stratified resampling n ordered random numbers u₁, ..., uₙ are generated, where\n\nuₖ sim U(k - 1)  n k  n). \n\nBased on these numbers the samples x₁, ..., xₙ are selected according to  the multinomial distribution defined by the normalized weights, i.e., xᵢ = j if and only if\n\nuᵢ in leftsum_s=1^j-1 weights_s sum_s=1^j weights_sright).\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.resample_systematic","page":"API","title":"AdvancedPS.resample_systematic","text":"resample_systematic(rng, weights, n)\n\nReturn a vector of n samples x₁, ..., xₙ from the numbers 1, ..., length(weights), generated by systematic resampling.\n\nIn systematic resampling a random number u sim U0 1) is used to generate n ordered numbers u₁, ..., uₙ where \n\nuₖ = (u + k  1)  n. \n\nBased on these numbers the samples x₁, ..., xₙ are selected according to  the multinomial distribution defined by the normalized weights, i.e., xᵢ = j if and only if\n\nuᵢ in leftsum_s=1^j-1 weights_s sum_s=1^j weights_sright)\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.reset_logweights!-Tuple{AdvancedPS.ParticleContainer}","page":"API","title":"AdvancedPS.reset_logweights!","text":"reset_logweights!(pc::ParticleContainer)\n\nReset all unnormalized logarithmic weights to zero.\n\n\n\n\n\n","category":"method"},{"location":"api/#AdvancedPS.reweight!","page":"API","title":"AdvancedPS.reweight!","text":"reweight!(pc::ParticleContainer)\n\nCheck if the final time step is reached, and otherwise reweight the particles by considering the next observation.\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.save_state!-Tuple{AdvancedPS.TracedRNG}","page":"API","title":"AdvancedPS.save_state!","text":"save_state!(r::TracedRNG)\n\nAdd current key of the inner rng in r to keys.\n\n\n\n\n\n","category":"method"},{"location":"api/#AdvancedPS.split","page":"API","title":"AdvancedPS.split","text":"split(key::Integer, n::Integer=1)\n\nSplit key into n new keys\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.sweep!","page":"API","title":"AdvancedPS.sweep!","text":"sweep!(rng, pc::ParticleContainer, resampler)\n\nPerform a particle sweep and return an unbiased estimate of the log evidence.\n\nThe resampling steps use the given resampler.\n\nReference\n\nDel Moral, P., Doucet, A., & Jasra, A. (2006). Sequential monte carlo samplers. Journal of the Royal Statistical Society: Series B (Statistical Methodology), 68(3), 411-436.\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.update_keys!","page":"API","title":"AdvancedPS.update_keys!","text":"update_keys!(pc::ParticleContainer)\n\nCreate new unique keys for the particles in the ParticleContainer\n\n\n\n\n\n","category":"function"},{"location":"api/#Random.seed!-Tuple{AdvancedPS.TracedRNG, Any}","page":"API","title":"Random.seed!","text":"update_rng!(rng::TracedRNG)\n\nSet key and counter of inner rng in rng to key and the running model step to 0\n\n\n\n\n\n","category":"method"},{"location":"api/#Random123.set_counter!-Tuple{AdvancedPS.TracedRNG, Integer}","page":"API","title":"Random123.set_counter!","text":"set_counter!(r::TracedRNG, n::Integer)\n\nSet the counter of the inner rng in r, used to keep track of the current model step\n\n\n\n\n\n","category":"method"},{"location":"examples/gaussian-ssm/#Gaussian-State-Space-Model","page":"Gaussian State Space Model","title":"Gaussian State Space Model","text":"","category":"section"},{"location":"examples/gaussian-ssm/","page":"Gaussian State Space Model","title":"Gaussian State Space Model","text":"using AdvancedPS\nusing AbstractMCMC\nusing Distributions\nusing Libtask: produce\nusing StatsFuns\n\nusing Plots\n\nx = [1, 2, 3]\ny = [2, 5, 1]\n\nplot(x, y)","category":"page"},{"location":"examples/gaussian-ssm/","page":"Gaussian State Space Model","title":"Gaussian State Space Model","text":"(Image: )","category":"page"},{"location":"examples/gaussian-ssm/","page":"Gaussian State Space Model","title":"Gaussian State Space Model","text":"","category":"page"},{"location":"examples/gaussian-ssm/","page":"Gaussian State Space Model","title":"Gaussian State Space Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#AdvancedPS:-Particle-Filters-for-Julia","page":"Home","title":"AdvancedPS: Particle Filters for Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a lightweight package that implements particle based Monte Carlo algorithms for the Turing ecosystem.","category":"page"},{"location":"#Installing-from-Julia","page":"Home","title":"Installing from Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, use the following command inside the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"AdvancedPS\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"To load the package, use the command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using AdvancedPS","category":"page"}]
}
